// app.js

const RENDER_PUBLIC_URL = 'https://tax-risk-predictor.onrender.com/'; // **‡∏£‡∏≠‡πÉ‡∏™‡πà URL ‡∏à‡∏£‡∏¥‡∏á**

const API_URL = RENDER_PUBLIC_URL + '/predict';
const TRAINING_API_URL = RENDER_PUBLIC_URL + '/training-info';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£
function updateProfit() {
    const revenue = parseFloat(document.getElementById('Revenue').value) || 0;
    const expenses = parseFloat(document.getElementById('Expenses').value) || 0;
    const profit = revenue - expenses;
    document.getElementById('ProfitDisplay').value = profit
        .toFixed(2)
        .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°
const BENCHMARK_REVENUE = 1200000;

function checkBenchmark() {
    const revenueInput = parseFloat(document.getElementById('Revenue').value) || 0;
    const feedbackDiv = document.getElementById('revenue-feedback');
    feedbackDiv.className = 'benchmark-feedback';

    if (revenueInput > BENCHMARK_REVENUE * 1.1) {
        feedbackDiv.innerHTML = 'üìà ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°';
        feedbackDiv.classList.add('high');
    } else if (revenueInput < BENCHMARK_REVENUE * 0.9) {
        feedbackDiv.innerHTML = 'üìâ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°';
        feedbackDiv.classList.add('low');
    } else {
        feedbackDiv.innerHTML = 'üìä ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢';
        feedbackDiv.classList.add('neutral');
    }
}

// Event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input
document.getElementById('Revenue').addEventListener('input', updateProfit);
document.getElementById('Expenses').addEventListener('input', updateProfit);
document.getElementById('Revenue').addEventListener('input', checkBenchmark);

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
updateProfit();
checkBenchmark();

// Event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö submit form
document.getElementById('taxRiskForm').addEventListener('submit', function(event) {
    event.preventDefault();

    const submitButton = event.target.querySelector('button[type="submit"]');
    submitButton.classList.add('is-loading');
    submitButton.innerHTML = '';

    const form = event.target;

    // ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå app.js (‡∏™‡πà‡∏ß‡∏ô inputData ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Event Listener ‡∏Ç‡∏≠‡∏á submit)

        const inputData = {
    "Revenue": parseFloat(form.Revenue.value),
    "Expenses": parseFloat(form.Expenses.value),
    "Tax_Liability": 50000.0,
    "Tax_Paid": 45000.0,
    // ********* ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ *********
    "Late_Filings": parseFloat(form.LateFilings.value) || 0.0,
    "Compliance_Violations": parseFloat(form.ComplianceViolations.value) || 0.0,
    // **********************************
    "Industry": form.Industry.value,
    "Profit": parseFloat(form.Revenue.value) - parseFloat(form.Expenses.value),
    "Tax_Compliance_Ratio": 0.9,
    "Audit_Findings": 1.0,
    "Audit_to_Tax_Ratio": 0.0
};

    fetch(API_URL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(inputData)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        const resultDiv = document.getElementById('result');
        const meterDisplay = document.getElementById('risk-meter-display');

        resultDiv.className = '';
        resultDiv.classList.add('risk-success');

        if (data.status === 'success') {
            const risk = data.tax_risk_label;
            let message = '';
            let riskClass = '';

            if (risk === 'High') {
                riskClass = 'risk-high';
                message = 'üö® ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç';
            } else if (risk === 'Medium') {
                riskClass = 'risk-medium';
                message = '‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á: ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£';
            } else {
                riskClass = 'risk-low';
                message = '‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
            }

            resultDiv.classList.add(riskClass);
            meterDisplay.innerHTML = `<div>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö ${risk}</div><p class="risk-message">${message}</p>`;
        } else {
            resultDiv.classList.add('risk-error');
            meterDisplay.innerHTML = `‚ùå ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${data.error}`;
        }
    })
    .catch(error => {
        console.error('Fetch error:', error);

        const resultDiv = document.getElementById('result');
        resultDiv.className = '';
        resultDiv.classList.add('risk-error');
        resultDiv.innerHTML = `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server ‡πÑ‡∏î‡πâ: ${error.message}`;
    })
    .finally(() => {
        submitButton.classList.remove('is-loading');
        submitButton.innerHTML = '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á';
    });
});

function loadTrainingData() {
    fetch(TRAINING_API_URL)
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                const tableBody = document.querySelector('#training-table tbody');
                tableBody.innerHTML = '';
                data.training_runs.forEach(run => {
                    const row = tableBody.insertRow();
                    if (run.status === "Selected (Final)") {
                        row.classList.add('selected-model');
                    }
                    row.insertCell().innerHTML = `<strong>${run.model_name}</strong><br><small>${run.features}</small>`;
                    row.insertCell().textContent = run.parameters;
                    row.insertCell().textContent = run.accuracy;
                    row.insertCell().textContent = run.status;
                });
                const final = data.final_model;
                document.getElementById('final-model-name').textContent = final.model_name;
                document.getElementById('final-model-acc').textContent = final.accuracy;
            } else {
                console.error("Failed to load training data:", data.error);
                document.getElementById('training-section').innerHTML = "<p style='color:red;'>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å AI ‡πÑ‡∏î‡πâ</p>";
            }
        })
        .catch(error => {
            console.error('Error fetching training data:', error);
            document.getElementById('training-section').innerHTML = "<p style='color:red;'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô AI</p>";
        });
}

document.addEventListener('DOMContentLoaded', loadTrainingData);
// app.js (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ)

function loadTrainingData() {
    fetch(TRAINING_API_URL)
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                const tableBody = document.querySelector('#training-table tbody');
                tableBody.innerHTML = '';
                data.training_runs.forEach(run => {
                    const row = tableBody.insertRow();
                    if (run.status === "Selected (Final)") {
                        row.classList.add('selected-model');
                    }
                    row.insertCell().innerHTML = `<strong>${run.model_name}</strong><br><small>${run.features}</small>`;
                    row.insertCell().textContent = run.parameters;
                    row.insertCell().textContent = run.accuracy;
                    row.insertCell().textContent = run.status;
                });
                const final = data.final_model;
                document.getElementById('final-model-name').textContent = final.model_name;
                document.getElementById('final-model-acc').textContent = final.accuracy;
            } else {
                console.error("Failed to load training data:", data.error);
                document.getElementById('training-section').innerHTML = "<p style='color:red;'>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å AI ‡πÑ‡∏î‡πâ</p>";
            }
        })
        .catch(error => {
            console.error('Error fetching training data:', error);
            document.getElementById('training-section').innerHTML = "<p style='color:red;'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô AI</p>";
        });
}

// *********************************************************
// ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏ß‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Toggle ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
// *********************************************************

document.addEventListener('DOMContentLoaded', () => {
    // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î
    loadTrainingData(); 
    
    // 2. ‡∏ú‡∏π‡∏Å Event Listener ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Toggle
    const toggleBtn = document.getElementById('toggle-training-btn');
    const trainingSection = document.getElementById('training-section');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error)
    if (toggleBtn && trainingSection) {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ HTML ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î style="display: none;")
        trainingSection.style.display = 'none'; 
        
        toggleBtn.addEventListener('click', () => {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const isHidden = trainingSection.style.display === 'none';
            
            if (isHidden) {
                trainingSection.style.display = 'block'; // ‡πÅ‡∏™‡∏î‡∏á
                toggleBtn.innerHTML = 'üîº ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å AI';
            } else {
                trainingSection.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô
                toggleBtn.innerHTML = 'üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å AI';
            }
        });
    }
});